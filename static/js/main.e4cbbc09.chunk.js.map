{"version":3,"sources":["types.ts","Header.tsx","Status.tsx","Road.tsx","Ad.tsx","Roads.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["ISource","Header","props","useState","dropdownOptions","setDropdownOptions","useEffect","roads","map","r","key","urlFriendly","value","text","roadName","content","style","textAlign","Card","fluid","Dropdown","placeholder","onChange","event","data","setFavorites","setTimeout","document","activeElement","blur","search","selection","multiple","closeOnChange","favorites","disabled","Boolean","length","loading","options","Status","open","setOpen","road","Modal","onClose","onOpen","trigger","Button","Content","Description","Actions","negative","onClick","positive","Road","setRoad","fetch","url","then","json","Item","as","Placeholder","image","Line","extra","Paragraph","status","messages","statusMessage","messageFeed","message","index","df","Intl","DateTimeFormat","weekday","month","day","hour","minute","times","format","Date","validFrom","validTo","Feed","Event","Popup","source","StatensVegvesen","Label","icon","inverted","Summary","share","a","shareNavigator","window","navigator","clipboard","writeText","location","href","title","Group","on","position","right","circular","basic","floated","margin","Image","width","size","src","verticalAlign","Extra","Ad","adsbygoogle","push","google_ad_client","className","display","RoadAndAd","React","forwardRef","ref","Divider","Roads","isMobile","setMobile","refs","innerWidth","innerHeight","filter","indexOf","reverse","i","createRef","active","color","button","target","closest","activeRoadIndex","findIndex","nextRoadIndex","nextRoad","current","scrollIntoView","behavior","transform","scrollToNextRoad","zIndex","bottom","left","marginLeft","App","setRoads","alert","setAlert","pathname","split","roadFromPath","Promise","resolve","localStorage","getItem","JSON","parse","storedFavorites","find","history","replaceState","catch","setItem","stringify","Message","onDismiss","maxWidth","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById","console","log"],"mappings":"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","file":"static/js/main.e4cbbc09.chunk.js","sourcesContent":["export interface IRoad {\n  roadName: string;\n  urlFriendly: string;\n  url: string;\n}\n\nexport enum ISource {\n  UserReported = \"Brukerskapt melding\",\n  StatensVegvesen = \"Statens Vegvesen\",\n}\n\ninterface IMessage {\n  source: ISource;\n  type: string;\n  validFrom: string;\n  validTo: string;\n  message: string;\n}\n\nexport interface IRoadStatus {\n  messages: IMessage[];\n  status: \"green\" | \"yellow\" | \"red\";\n  statusMessage: string;\n  statusCode: 10 | 20 | 30;\n  gps?: IGPS;\n}\n\nexport interface IGPS {\n  lat: number;\n  lon: number;\n}\n\nexport type IFavorite = string;\n","import React, { FC } from \"react\";\nimport { useEffect, useState } from \"react\";\nimport { Card, Dropdown, DropdownProps } from \"semantic-ui-react\";\nimport { IFavorite, IRoad } from \"./types\";\n\ninterface IDropdownOption {\n  key: string;\n  value: string;\n  text: string;\n}\n\ntype HeaderProps = {\n  roads: IRoad[];\n  favorites: IFavorite[];\n  setFavorites: (f: IFavorite[]) => void;\n};\n\nconst Header: FC<any> = (props: HeaderProps) => {\n  const [dropdownOptions, setDropdownOptions] = useState<IDropdownOption[]>([]);\n\n  useEffect(() => {\n    setDropdownOptions(\n      props.roads.map((r: IRoad) => ({\n        key: r.urlFriendly,\n        value: r.urlFriendly,\n        text: r.roadName,\n        content: <>{r.roadName}</>,\n      }))\n    );\n  }, [props.roads]);\n\n  const addFavorite = (event: any, data: DropdownProps) => {\n    props.setFavorites(data.value as IFavorite[]);\n\n    setTimeout(() => {\n      if (\"activeElement\" in document) {\n        (document.activeElement as HTMLElement).blur();\n      }\n    }, 100);\n  };\n\n  return (\n    <>\n      <h1 style={{ textAlign: \"center\" }}>Stengt tunnel</h1>\n      <Card fluid>\n        <Dropdown\n          placeholder=\"Velg tunnel(er)\"\n          onChange={addFavorite}\n          fluid\n          search\n          selection\n          multiple\n          closeOnChange\n          value={props.favorites}\n          disabled={!Boolean(dropdownOptions.length)}\n          loading={!Boolean(dropdownOptions.length)}\n          options={dropdownOptions}\n        />\n      </Card>\n    </>\n  );\n};\n\nexport default Header;\n","import React, { FC, useState } from \"react\";\nimport { IRoad } from \"./types\";\nimport { Modal, Button } from \"semantic-ui-react\";\n\ntype StatusProps = {\n  road: IRoad;\n};\n\nconst Status: FC<any> = (props: StatusProps) => {\n  const [open, setOpen] = useState<boolean>(false);\n  const { roadName } = props.road;\n\n  return (\n    <Modal\n      onClose={() => setOpen(false)}\n      onOpen={() => setOpen(true)}\n      open={open}\n      trigger={<Button>Er status feil?</Button>}\n    >\n      <Modal.Header>Er {roadName} åpen eller stengt?</Modal.Header>\n      <Modal.Content>\n        <Modal.Description>\n          <p>\n            Basert på din lokasjon ser vi at du er nærmere enn 20km fra\n            tunnelen. Så du vet kanskje hva som er riktig?\n          </p>\n          <p>Er {roadName} egentlig åpen?</p>\n        </Modal.Description>\n      </Modal.Content>\n      <Modal.Actions>\n        <Button negative onClick={() => setOpen(false)}>\n          Stengt\n        </Button>\n        <Button positive onClick={() => setOpen(false)}>\n          Åpen\n        </Button>\n      </Modal.Actions>\n    </Modal>\n  );\n};\n\nexport default Status;\n","import React, { FC, useEffect, useState } from \"react\";\nimport { IRoad, IRoadStatus, ISource } from \"./types\";\nimport Status from \"./Status\";\nimport {\n  Card,\n  Feed,\n  Popup,\n  Item,\n  Button,\n  Placeholder,\n} from \"semantic-ui-react\";\n\ntype RoadProps = {\n  road: IRoad;\n};\n\nconst Road: FC<any> = (props: RoadProps) => {\n  const [road, setRoad] = useState<IRoadStatus>();\n  const { roadName } = props.road;\n\n  useEffect(() => {\n    fetch(props.road.url)\n      .then((r) => r.json())\n      .then((r) => {\n        return {\n          ...r,\n          ...props.road,\n        };\n      })\n      .then(setRoad);\n  }, [props.road]);\n\n  if (!road) {\n    return (\n      <Card fluid>\n        <Card.Content>\n          <Item.Header as=\"h2\">{roadName}</Item.Header>\n          <Placeholder>\n            <Placeholder.Header image>\n              <Placeholder.Line length=\"full\" />\n              <Placeholder.Line length=\"medium\" />\n              <Placeholder.Line />\n              <Placeholder.Line length=\"medium\" />\n            </Placeholder.Header>\n          </Placeholder>\n        </Card.Content>\n        <Card.Content extra>\n          <Placeholder>\n            <Placeholder.Paragraph>\n              <Placeholder.Line length=\"full\" />\n              <Placeholder.Line />\n              <Placeholder.Line />\n              <Placeholder.Line length=\"full\" />\n            </Placeholder.Paragraph>\n          </Placeholder>\n        </Card.Content>\n      </Card>\n    );\n  }\n  const { status, messages, statusMessage } = road!;\n\n  const image = `https://stengttunnel.no/status/${status}.png`;\n  const messageFeed = messages.map((message, index) => {\n    const df = new Intl.DateTimeFormat(\n      [\"nb-no\", \"da\", \"sv\", \"en-us\", \"en-gb\"],\n      {\n        weekday: \"short\",\n        month: \"short\",\n        day: \"numeric\",\n        hour: \"2-digit\",\n        minute: \"2-digit\",\n      }\n    );\n\n    const times = `${df.format(new Date(message.validFrom))} - ${df.format(\n      new Date(message.validTo)\n    )}`;\n    return (\n      <Feed.Event key={\"message-\" + index}>\n        <Popup\n          trigger={\n            message.source === ISource.StatensVegvesen ? (\n              <Feed.Label image=\"/vv_logo.png\" />\n            ) : (\n              <Feed.Label icon=\"user outline\" />\n            )\n          }\n          content={message.source}\n          inverted\n        />\n        <Feed.Content>\n          <Feed.Date content={times} />\n          <Feed.Summary>{message.message}</Feed.Summary>\n        </Feed.Content>\n      </Feed.Event>\n    );\n  });\n\n  const share = async () => {\n    let shareNavigator = window.navigator as any;\n    if (shareNavigator.clipboard) {\n      await window.navigator.clipboard.writeText(\n        window.location.href + \"/veien\"\n      );\n    }\n    if (shareNavigator.share) {\n      await window.navigator.share({\n        title: \"Stengttunnel\",\n        text: statusMessage,\n        url: window.location.href + \"/veieeeen\",\n      });\n    }\n  };\n\n  return (\n    <Card fluid>\n      <Card.Content>\n        <Item.Group>\n          <Popup\n            on={[\"click\"]}\n            trigger={\n              <Button\n                onClick={share}\n                style={{ position: \"absolute\", right: \"10px\" }}\n                icon=\"external share\"\n                circular\n                basic\n              ></Button>\n            }\n            content=\"Kopiert linken\"\n            inverted\n          />\n          <Item floated=\"left\" style={{ margin: 0 }}>\n            <Item.Image style={{ width: \"auto\" }} size=\"tiny\" src={image} />\n            <Item.Content verticalAlign=\"middle\">\n              <Item.Header as=\"h2\">{statusMessage}</Item.Header>\n              <Item.Extra>\n                <Status road={road} />\n              </Item.Extra>\n            </Item.Content>\n          </Item>\n        </Item.Group>\n      </Card.Content>\n      <Card.Content extra>\n        <Feed>{messageFeed}</Feed>\n      </Card.Content>\n    </Card>\n  );\n};\n\nexport default Road;\n","import React, { useEffect, FC } from \"react\";\n\nconst Ad: FC<any> = (props: any) => {\n  useEffect(() => {\n    (window.adsbygoogle = window.adsbygoogle || []).push({\n      google_ad_client: \"ca-pub-8133897183984535\",\n      // enable_page_level_ads: true\n    });\n  }, []);\n\n  return (\n    <ins\n      className=\"adsbygoogle\"\n      style={{ display: \"block\" }}\n      data-ad-client=\"ca-pub-8133897183984535\"\n      data-ad-slot=\"5404963764\"\n      data-ad-format=\"auto\"\n      data-full-width-responsive=\"true\"\n      // data-adtest=\"on\"\n    />\n  );\n};\n\ndeclare global {\n  interface Window {\n    adsbygoogle: any;\n  }\n}\n\nexport default Ad;\n","import React, { useEffect, useState } from \"react\";\nimport { RefObject } from \"react\";\n\nimport { Divider, Button } from \"semantic-ui-react\";\nimport \"./App.css\";\nimport { IRoad, IFavorite } from \"./types\";\nimport Road from \"./Road\";\nimport Ad from \"./Ad\";\n\ntype RoadsProps = {\n  roads: IRoad[];\n  favorites: IFavorite[];\n};\n\ntype RoadAndAdProps = {\n  road: IRoad;\n};\n\ntype RefDataObject = {\n  active: boolean;\n  road: IRoad;\n  ref: RefObject<HTMLDivElement>;\n  key: string;\n};\n\nconst RoadAndAd = React.forwardRef((props: RoadAndAdProps, ref: any) => {\n  const r = props.road;\n  return (\n    <div ref={ref} key={`container-${r.urlFriendly}`}>\n      <Road road={r} />\n      <Divider />\n      <Ad />\n      <Divider />\n    </div>\n  );\n});\n\nconst Roads = (props: RoadsProps) => {\n  const [isMobile, setMobile] = useState<boolean>(false);\n  const refs: RefDataObject[] = [];\n\n  useEffect(() => {\n    setMobile(window.innerWidth < 600 || window.innerHeight < 900);\n  }, []);\n\n  const roads = props.roads\n    .filter((r) => props.favorites.indexOf(r.urlFriendly) !== -1)\n    .reverse()\n    .map((r, i) => {\n      const ref = React.createRef<HTMLDivElement>();\n      refs.push({\n        active: i === 0 ? true : false,\n        ref,\n        road: r,\n        key: r.urlFriendly,\n      });\n      return <RoadAndAd ref={ref} key={r.urlFriendly} road={r} />;\n    });\n\n  const scrollToNextRoad = (event: any, data: any) => {\n    const button = event.target.closest(\"button\");\n    let activeRoadIndex = refs.findIndex((r) => r.active === true);\n    refs[activeRoadIndex].active = false;\n\n    const nextRoadIndex = ++activeRoadIndex % refs.length;\n    const nextRoad = refs[nextRoadIndex];\n\n    nextRoad.active = true;\n    refs[nextRoadIndex] = nextRoad;\n    nextRoad.ref.current?.scrollIntoView({\n      behavior: \"smooth\",\n    });\n\n    if (nextRoadIndex === refs.length - 1) {\n      button.style.transform = \"rotate(-180deg)\";\n    } else {\n      button.style.transform = \"rotate(0)\";\n    }\n  };\n\n  return (\n    <>\n      {roads}\n      {isMobile && (\n        <Button\n          size=\"massive\"\n          color=\"red\"\n          circular\n          active={false}\n          icon={`arrow down`}\n          onClick={(event, data) => scrollToNextRoad(event, data)}\n          style={{\n            zIndex: 10000,\n            position: \"fixed\",\n            bottom: \"25px\",\n            left: \"50%\",\n            marginLeft: \"-31px\",\n          }}\n        />\n      )}\n    </>\n  );\n};\n\nexport default Roads;\n","import React, { FC, useEffect, useState } from \"react\";\nimport { Message } from \"semantic-ui-react\";\nimport \"./App.css\";\nimport Header from \"./Header\";\nimport { IRoad, IFavorite } from \"./types\";\nimport Roads from \"./Roads\";\n\nconst App: FC<any> = () => {\n  const [roads, setRoads] = useState<IRoad[]>([]);\n  const [favorites, setFavorites] = useState<IFavorite[]>([]);\n  const [alert, setAlert] = useState<String | null>(null);\n\n  useEffect(() => {\n    fetch(\"https://stengttunnel.no/roads.json\")\n      .then((r) => r.json())\n      .then(setRoads);\n  }, []);\n\n  useEffect(() => {\n    const [, roadFromPath] = window.location.pathname.split(\"/\");\n\n    Promise.resolve(localStorage.getItem(\"favorites\") || \"[]\")\n      .then((r) => JSON.parse(r))\n      .then((storedFavorites) => {\n        if (\n          roadFromPath &&\n          storedFavorites.indexOf(roadFromPath) === -1 &&\n          roads.find((r) => r.urlFriendly === roadFromPath)\n        ) {\n          window.history.replaceState(null, \"Stengt tunnel\", \"/\");\n          storedFavorites.push(roadFromPath);\n        } else if (roadFromPath && roads.length > 0) {\n          setAlert(\"Finner ikke tunnelen eller veien '\" + roadFromPath + \"'\");\n        }\n        return storedFavorites;\n      })\n      .then(setFavorites)\n      .catch(() => setFavorites([]));\n  }, [roads]);\n\n  useEffect(() => {\n    localStorage.setItem(\"favorites\", JSON.stringify(favorites));\n  }, [favorites]);\n\n  return (\n    <>\n      {alert && (\n        <Message\n          negative\n          onDismiss={() => {\n            setAlert(null);\n            window.history.replaceState(null, \"Stengt tunnel\", \"/\");\n          }}\n        >\n          <Message.Header>404 Finner ikke siden</Message.Header>\n          <p>{alert}</p>\n        </Message>\n      )}\n      <div style={{ margin: \"15px auto\", maxWidth: \"640px\" }}>\n        <Header\n          roads={roads}\n          favorites={favorites}\n          setFavorites={setFavorites}\n        />\n          <Roads favorites={favorites} roads={roads} />\n      </div>\n    </>\n  );\n};\n\nexport default App;\n","import { ReportHandler } from \"web-vitals\";\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"semantic-ui-css/semantic.min.css\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals(console.log);\n"],"sourceRoot":""}