{"version":3,"sources":["types.ts","Header.tsx","Road.tsx","Ad.tsx","Roads.tsx","App.tsx","index.tsx"],"names":["ISource","Header","props","useState","dropdownOptions","setDropdownOptions","useEffect","roads","map","r","key","urlFriendly","value","text","roadName","content","Card","fluid","Dropdown","placeholder","onChange","event","data","setFavorites","setTimeout","document","activeElement","blur","search","selection","multiple","closeOnChange","favorites","disabled","Boolean","length","loading","options","Road","road","setRoad","shouldUpdate","setShouldUpdate","setLoading","useMemo","addEventListener","visibilityState","fetch","url","then","json","Content","Item","as","Placeholder","image","Line","extra","Paragraph","status","messages","statusMessage","messageFeed","message","index","df","Intl","DateTimeFormat","weekday","month","day","hour","minute","times","format","Date","validFrom","validTo","Feed","Event","Popup","trigger","source","StatensVegvesen","Label","icon","inverted","Summary","share","a","shareNavigator","window","navigator","host","URL","location","href","protocol","clipboard","writeText","title","role","Group","on","Button","onClick","style","position","right","circular","basic","floated","margin","Image","width","size","src","verticalAlign","Ad","adsbygoogle","push","google_ad_client","className","display","RoadAndAd","React","forwardRef","ref","Divider","Roads","isMobile","setMobile","refs","innerWidth","innerHeight","filter","indexOf","reverse","i","createRef","active","color","button","target","closest","activeRoadIndex","findIndex","nextRoadIndex","nextRoad","current","scrollIntoView","behavior","transform","scrollToNextRoad","zIndex","bottom","left","marginLeft","App","setRoads","alert","setAlert","isMounted","pathname","split","roadFromPath","Promise","resolve","localStorage","getItem","JSON","parse","storedFavorites","find","history","replaceState","catch","setItem","stringify","Segment","Menu","secondary","maxWidth","alt","header","Message","negative","onDismiss","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.10086ce9.chunk.js","sourcesContent":["export interface IRoad {\n  roadName: string;\n  urlFriendly: string;\n  url: string;\n}\n\nexport enum ISource {\n  UserReported = \"Brukerskapt melding\",\n  StatensVegvesen = \"Statens Vegvesen\",\n}\n\ninterface IMessage {\n  source: ISource;\n  type: string;\n  validFrom: string;\n  validTo: string;\n  message: string;\n}\n\nexport interface IRoadStatus {\n  messages: IMessage[];\n  status: \"green\" | \"yellow\" | \"red\";\n  statusMessage: string;\n  statusCode: 10 | 20 | 30;\n  gps?: IGPS;\n}\n\nexport interface IGPS {\n  lat: number;\n  lon: number;\n}\n\nexport type IFavorite = string;\n","import React from \"react\";\nimport { useEffect, useState } from \"react\";\nimport { Card, Dropdown, DropdownProps } from \"semantic-ui-react\";\nimport { IFavorite, IRoad } from \"./types\";\n\ninterface IDropdownOption {\n  key: string;\n  value: string;\n  text: string;\n}\n\ntype HeaderProps = {\n  roads: IRoad[];\n  favorites: IFavorite[];\n  setFavorites: (f: IFavorite[]) => void;\n};\n\nconst Header = (props: HeaderProps) => {\n  const [dropdownOptions, setDropdownOptions] = useState<IDropdownOption[]>([]);\n\n  useEffect(() => {\n    setDropdownOptions(\n      props.roads.map((r: IRoad) => ({\n        key: r.urlFriendly,\n        value: r.urlFriendly,\n        text: r.roadName,\n        content: <>{r.roadName}</>,\n      }))\n    );\n  }, [props.roads]);\n\n  const addFavorite = (event: any, data: DropdownProps) => {\n    props.setFavorites(data.value as IFavorite[]);\n\n    setTimeout(() => {\n      if (\"activeElement\" in document) {\n        (document.activeElement as HTMLElement).blur();\n      }\n    }, 100);\n  };\n\n  return (\n    <>\n      <Card fluid>\n        <Dropdown\n          placeholder=\"Velg tunnel(er)\"\n          onChange={addFavorite}\n          fluid\n          search\n          selection\n          multiple\n          closeOnChange\n          value={props.favorites}\n          disabled={!Boolean(dropdownOptions.length)}\n          loading={!Boolean(dropdownOptions.length)}\n          options={dropdownOptions}\n        />\n      </Card>\n    </>\n  );\n};\n\nexport default Header;\n","import React, { FC, useEffect, useState, useMemo } from \"react\";\nimport { IRoad, IRoadStatus, ISource } from \"./types\";\nimport {\n  Card,\n  Feed,\n  Popup,\n  Item,\n  Button,\n  Placeholder,\n} from \"semantic-ui-react\";\n\ntype RoadProps = {\n  road: IRoad;\n};\n\nconst Road: FC<any> = (props: RoadProps) => {\n  const [road, setRoad] = useState<IRoadStatus>();\n  const [shouldUpdate, setShouldUpdate] = useState(false);\n  const [loading, setLoading] = useState(true);\n  const { roadName } = props.road;\n\n  useMemo(() => {\n    document.addEventListener(\"visibilitychange\", () => {\n      if (document.visibilityState === \"visible\") {\n        setShouldUpdate(true);\n      } else {\n        setShouldUpdate(false);\n      }\n    });\n  }, []);\n\n  useEffect(() => {\n    setLoading(true);\n    fetch(props.road.url)\n      .then((r) => r.json())\n      .then((r) => {\n        return {\n          ...r,\n          ...props.road,\n        };\n      })\n      .then(setRoad)\n      .then(() => setLoading(false));\n  }, [props.road, shouldUpdate]);\n\n  if (loading) {\n    return (\n      <Card fluid>\n        <Card.Content>\n          <Item.Header as=\"h2\">{roadName}</Item.Header>\n          <Placeholder>\n            <Placeholder.Header image>\n              <Placeholder.Line length=\"full\" />\n              <Placeholder.Line length=\"medium\" />\n              <Placeholder.Line />\n              <Placeholder.Line length=\"medium\" />\n            </Placeholder.Header>\n          </Placeholder>\n        </Card.Content>\n        <Card.Content extra>\n          <Placeholder>\n            <Placeholder.Paragraph>\n              <Placeholder.Line length=\"full\" />\n              <Placeholder.Line />\n              <Placeholder.Line />\n              <Placeholder.Line length=\"full\" />\n            </Placeholder.Paragraph>\n          </Placeholder>\n        </Card.Content>\n      </Card>\n    );\n  }\n  const { status, messages, statusMessage } = road!;\n\n  const image = `https://stengttunnel.no/status/${status}.png`;\n  const messageFeed = messages.map((message, index) => {\n    const df = new Intl.DateTimeFormat(\n      [\"nb-no\", \"da\", \"sv\", \"en-us\", \"en-gb\"],\n      {\n        weekday: \"short\",\n        month: \"short\",\n        day: \"numeric\",\n        hour: \"2-digit\",\n        minute: \"2-digit\",\n      }\n    );\n\n    const times = `${df.format(new Date(message.validFrom))} - ${df.format(\n      new Date(message.validTo)\n    )}`;\n    return (\n      <Feed.Event key={\"message-\" + index}>\n        <Popup\n          trigger={\n            message.source === ISource.StatensVegvesen ? (\n              <Feed.Label image=\"/vv_logo.png\" />\n            ) : (\n              <Feed.Label icon=\"user outline\" />\n            )\n          }\n          content={message.source}\n          inverted\n        />\n        <Feed.Content>\n          <Feed.Date content={times} />\n          <Feed.Summary>{message.message}</Feed.Summary>\n        </Feed.Content>\n      </Feed.Event>\n    );\n  });\n\n  const share = async () => {\n    let shareNavigator = window.navigator as any;\n    const host = new URL(window.location.href);\n    const url = `${host.protocol}//${host.host}/${props.road.urlFriendly}`;\n\n    if (shareNavigator.clipboard) {\n      await window.navigator.clipboard.writeText(url);\n    }\n    if (shareNavigator.share) {\n      await window.navigator.share({\n        title: \"Stengt tunnel\",\n        text: statusMessage + \"\\nSe mer på \",\n        url,\n      });\n    }\n  };\n\n  return (\n    <Card fluid role=\"road\">\n      <Card.Content>\n        <Item.Group>\n          <Popup\n            on={[\"click\"]}\n            trigger={\n              <Button\n                onClick={share}\n                style={{ position: \"absolute\", right: \"10px\" }}\n                icon=\"external share\"\n                circular\n                basic\n              ></Button>\n            }\n            content=\"Kopiert linken\"\n            inverted\n          />\n          <Item floated=\"left\" style={{ margin: 0 }}>\n            <Item.Image style={{ width: \"auto\" }} size=\"tiny\" src={image} />\n            <Item.Content verticalAlign=\"middle\">\n              <Item.Header role=\"status\" as=\"h2\">\n                {statusMessage}\n              </Item.Header>\n            </Item.Content>\n          </Item>\n        </Item.Group>\n      </Card.Content>\n      <Card.Content extra>\n        <Feed>{messageFeed}</Feed>\n      </Card.Content>\n    </Card>\n  );\n};\n\nexport default Road;\n","import React, { useEffect, FC } from \"react\";\n\nconst Ad: FC<any> = (props: any) => {\n  useEffect(() => {\n    (window.adsbygoogle = window.adsbygoogle || []).push({\n      google_ad_client: \"ca-pub-8133897183984535\",\n      // enable_page_level_ads: true\n    });\n  }, []);\n\n  return (\n    <ins\n      className=\"adsbygoogle\"\n      style={{ display: \"block\" }}\n      data-ad-client=\"ca-pub-8133897183984535\"\n      data-ad-slot=\"5404963764\"\n      data-ad-format=\"auto\"\n      data-full-width-responsive=\"true\"\n      // data-adtest=\"on\"\n    />\n  );\n};\n\ndeclare global {\n  interface Window {\n    adsbygoogle: any;\n  }\n}\n\nexport default Ad;\n","import React, { useEffect, useState } from \"react\";\nimport { RefObject } from \"react\";\n\nimport { Divider, Button } from \"semantic-ui-react\";\nimport \"./App.css\";\nimport { IRoad, IFavorite } from \"./types\";\nimport Road from \"./Road\";\nimport Ad from \"./Ad\";\n\ntype RoadsProps = {\n  roads: IRoad[];\n  favorites: IFavorite[];\n};\n\ntype RoadAndAdProps = {\n  road: IRoad;\n};\n\ntype RefDataObject = {\n  active: boolean;\n  road: IRoad;\n  ref: RefObject<HTMLDivElement>;\n  key: string;\n};\n\nconst RoadAndAd = React.forwardRef((props: RoadAndAdProps, ref: any) => {\n  const r = props.road;\n  return (\n    <div ref={ref} key={`container-${r.urlFriendly}`}>\n      <Road road={r} />\n      <Divider />\n      <Ad />\n      <Divider />\n    </div>\n  );\n});\n\nconst Roads = (props: RoadsProps) => {\n  const [isMobile, setMobile] = useState<boolean>(false);\n  const refs: RefDataObject[] = [];\n\n  useEffect(() => {\n    setMobile(window.innerWidth < 600 || window.innerHeight < 900);\n  }, []);\n\n  const roads = props.roads\n    .filter((r) => props.favorites.indexOf(r.urlFriendly) !== -1)\n    .reverse()\n    .map((r, i) => {\n      const ref = React.createRef<HTMLDivElement>();\n      refs.push({\n        active: i === 0 ? true : false,\n        ref,\n        road: r,\n        key: r.urlFriendly,\n      });\n      return <RoadAndAd ref={ref} key={r.urlFriendly} road={r} />;\n    });\n\n  const scrollToNextRoad = (event: any, data: any) => {\n    const button = event.target.closest(\"button\");\n    let activeRoadIndex = refs.findIndex((r) => r.active === true);\n    refs[activeRoadIndex].active = false;\n\n    const nextRoadIndex = ++activeRoadIndex % refs.length;\n    const nextRoad = refs[nextRoadIndex];\n\n    nextRoad.active = true;\n    refs[nextRoadIndex] = nextRoad;\n    nextRoad.ref.current?.scrollIntoView({\n      behavior: \"smooth\",\n    });\n\n    if (nextRoadIndex === refs.length - 1) {\n      button.style.transform = \"rotate(-180deg)\";\n    } else {\n      button.style.transform = \"rotate(0)\";\n    }\n  };\n\n  return (\n    <>\n      {roads}\n      {isMobile && (\n        <Button\n          size=\"massive\"\n          color=\"red\"\n          circular\n          active={false}\n          icon={`arrow down`}\n          onClick={(event, data) => scrollToNextRoad(event, data)}\n          style={{\n            zIndex: 10000,\n            position: \"fixed\",\n            bottom: \"25px\",\n            left: \"50%\",\n            marginLeft: \"-31px\",\n          }}\n        />\n      )}\n    </>\n  );\n};\n\nexport default Roads;\n","import React, { useEffect, useState } from \"react\";\nimport { Message, Segment, Menu } from \"semantic-ui-react\";\nimport \"./App.css\";\nimport Header from \"./Header\";\nimport { IRoad, IFavorite } from \"./types\";\nimport Roads from \"./Roads\";\n\nconst App = () => {\n  const [roads, setRoads] = useState<IRoad[]>([]);\n  const [favorites, setFavorites] = useState<IFavorite[]>([]);\n  const [alert, setAlert] = useState<String | null>(null);\n\n  useEffect(() => {\n    let isMounted = true;\n    fetch(\"https://api.stengttunnel.no/roads.json\")\n      .then((r) => r.json())\n      .then((data) => {\n        if (isMounted) {\n          setRoads(data);\n        }\n      });\n\n    return () => {\n      isMounted = false;\n    };\n  }, []);\n\n  useEffect(() => {\n    const [, roadFromPath] = window.location.pathname.split(\"/\");\n\n    Promise.resolve(localStorage.getItem(\"favorites\") || \"[]\")\n      .then((r) => JSON.parse(r))\n      .then((storedFavorites) => {\n        if (roadFromPath && roads.find((r) => r.urlFriendly === roadFromPath)) {\n          if (storedFavorites.indexOf(roadFromPath) === -1) {\n            storedFavorites.push(roadFromPath);\n          }\n          window.history.replaceState(null, \"Stengt tunnel\", \"/\");\n        } else if (roadFromPath && roads.length > 0) {\n          setAlert(\"Finner ikke tunnelen eller veien '\" + roadFromPath + \"'\");\n        }\n        return storedFavorites;\n      })\n      .then(setFavorites)\n      .catch(() => setFavorites([]));\n  }, [roads]);\n\n  useEffect(() => {\n    localStorage.setItem(\"favorites\", JSON.stringify(favorites));\n  }, [favorites]);\n\n  return (\n    <>\n      <Segment inverted>\n        <Menu\n          inverted\n          secondary\n          style={{ margin: \"0 auto\", maxWidth: \"640px\" }}\n        >\n          <Menu.Item>\n            <img alt=\"Stengt tunnel logo\" src=\"/images/stengttunnel-logo.png\" />\n          </Menu.Item>\n          <Menu.Item header>Stengt tunnel</Menu.Item>\n        </Menu>\n      </Segment>\n      <div style={{ margin: \"15px auto\", maxWidth: \"640px\" }}>\n        {alert && (\n          <Message\n            negative\n            onDismiss={() => {\n              setAlert(null);\n              window.history.replaceState(null, \"Stengt tunnel\", \"/\");\n            }}\n          >\n            <Message.Header>404 Finner ikke siden</Message.Header>\n            <p>{alert}</p>\n          </Message>\n        )}\n        <Header\n          roads={roads}\n          favorites={favorites}\n          setFavorites={setFavorites}\n        />\n        <Roads favorites={favorites} roads={roads} />\n      </div>\n    </>\n  );\n};\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"semantic-ui-css/semantic.min.css\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n// reportWebVitals(console.log);\n"],"sourceRoot":""}